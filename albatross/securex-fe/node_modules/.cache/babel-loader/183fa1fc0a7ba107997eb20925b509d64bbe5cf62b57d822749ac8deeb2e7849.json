{"ast":null,"code":"var _jsxFileName = \"/Users/ritsrnjn/securex-fe/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport ChatBox from './ChatBox';\nimport InfoBox from './InfoBox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      chatData: [],\n      infoData: []\n    };\n    this.handleSend = async message => {\n      // Add the user's message to the chat data\n      this.setState(prevState => ({\n        chatData: [...prevState.chatData, {\n          user: true,\n          text: message\n        }]\n      }));\n      try {\n        // Replace with your actual API endpoint\n        const response = await fetch('https://avid-infinity-386618.el.r.appspot.com/api', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            userPrompt: message\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n\n        // Parse the response data\n        const data = await response.json();\n\n        // Add the response message to the chat data\n        this.setState(prevState => ({\n          chatData: [...prevState.chatData, {\n            user: false,\n            text: data.response\n          }],\n          infoData: [data.response]\n        }));\n      } catch (error) {\n        console.error('Error:', error);\n      }\n\n      // // Simulate an API response after a delay\n      // setTimeout(() => {\n      //   const simulatedApiResponse = {\n      //     chatResponse: 'This is the chat response',\n      //     infoResponse: 'This is the info response',\n      //   };\n\n      //   // Add the response messages to the chat data and info data\n      //   this.setState((prevState) => ({\n      //     chatData: [...prevState.chatData, { user: false, text: simulatedApiResponse.chatResponse }],\n      //     infoData: [ simulatedApiResponse.infoResponse],\n      //   }));\n      // }, 1000);\n    };\n  }\n\n  render() {\n    const {\n      chatData,\n      infoData\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-section\",\n        children: /*#__PURE__*/_jsxDEV(ChatBox, {\n          chatData: chatData,\n          onSend: this.handleSend\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info-section\",\n        children: /*#__PURE__*/_jsxDEV(InfoBox, {\n          infoData: infoData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","ChatBox","InfoBox","jsxDEV","_jsxDEV","App","Component","constructor","args","state","chatData","infoData","handleSend","message","setState","prevState","user","text","response","fetch","method","headers","body","JSON","stringify","userPrompt","ok","Error","data","json","error","console","render","className","children","onSend","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/ritsrnjn/securex-fe/src/App.js"],"sourcesContent":["import React from 'react';\nimport './App.css';\nimport ChatBox from './ChatBox';\nimport InfoBox from './InfoBox';\n\nclass App extends React.Component {\n  state = {\n    chatData: [],\n    infoData: [],\n  };\n\n  handleSend = async (message) => {\n    // Add the user's message to the chat data\n    this.setState((prevState) => ({\n      chatData: [...prevState.chatData, { user: true, text: message }],\n    }));\n\n    try {\n      // Replace with your actual API endpoint\n      const response = await fetch('https://avid-infinity-386618.el.r.appspot.com/api', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ userPrompt: message }),\n      });\n  \n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n  \n      // Parse the response data\n      const data = await response.json();\n\n      // Add the response message to the chat data\n      this.setState((prevState) => ({\n        chatData: [...prevState.chatData, { user: false, text: data.response }],\n        infoData: [data.response],\n      }));\n    } catch (error) {\n      console.error('Error:', error);\n    }\n\n    // // Simulate an API response after a delay\n    // setTimeout(() => {\n    //   const simulatedApiResponse = {\n    //     chatResponse: 'This is the chat response',\n    //     infoResponse: 'This is the info response',\n    //   };\n\n    //   // Add the response messages to the chat data and info data\n    //   this.setState((prevState) => ({\n    //     chatData: [...prevState.chatData, { user: false, text: simulatedApiResponse.chatResponse }],\n    //     infoData: [ simulatedApiResponse.infoResponse],\n    //   }));\n    // }, 1000);\n  };\n\n  render() {\n    const { chatData, infoData } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"chat-section\">\n          <ChatBox chatData={chatData} onSend={this.handleSend} />\n        </div>\n        <div className=\"info-section\">\n          <InfoBox infoData={infoData} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,WAAW;AAClB,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,GAAG,SAASL,KAAK,CAACM,SAAS,CAAC;EAAAC,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KAChCC,KAAK,GAAG;MACNC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE;IACZ,CAAC;IAAA,KAEDC,UAAU,GAAG,MAAOC,OAAO,IAAK;MAC9B;MACA,IAAI,CAACC,QAAQ,CAAEC,SAAS,KAAM;QAC5BL,QAAQ,EAAE,CAAC,GAAGK,SAAS,CAACL,QAAQ,EAAE;UAAEM,IAAI,EAAE,IAAI;UAAEC,IAAI,EAAEJ;QAAQ,CAAC;MACjE,CAAC,CAAC,CAAC;MAEH,IAAI;QACF;QACA,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,mDAAmD,EAAE;UAChFC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEC,UAAU,EAAEZ;UAAQ,CAAC;QAC9C,CAAC,CAAC;QAEF,IAAI,CAACK,QAAQ,CAACQ,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAChD;;QAEA;QACA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;;QAElC;QACA,IAAI,CAACf,QAAQ,CAAEC,SAAS,KAAM;UAC5BL,QAAQ,EAAE,CAAC,GAAGK,SAAS,CAACL,QAAQ,EAAE;YAAEM,IAAI,EAAE,KAAK;YAAEC,IAAI,EAAEW,IAAI,CAACV;UAAS,CAAC,CAAC;UACvEP,QAAQ,EAAE,CAACiB,IAAI,CAACV,QAAQ;QAC1B,CAAC,CAAC,CAAC;MACL,CAAC,CAAC,OAAOY,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAChC;;MAEA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;IACF,CAAC;EAAA;;EAEDE,MAAMA,CAAA,EAAG;IACP,MAAM;MAAEtB,QAAQ;MAAEC;IAAS,CAAC,GAAG,IAAI,CAACF,KAAK;IAEzC,oBACEL,OAAA;MAAK6B,SAAS,EAAC,KAAK;MAAAC,QAAA,gBAClB9B,OAAA;QAAK6B,SAAS,EAAC,cAAc;QAAAC,QAAA,eAC3B9B,OAAA,CAACH,OAAO;UAACS,QAAQ,EAAEA,QAAS;UAACyB,MAAM,EAAE,IAAI,CAACvB;QAAW;UAAAwB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrD,CAAC,eACNnC,OAAA;QAAK6B,SAAS,EAAC,cAAc;QAAAC,QAAA,eAC3B9B,OAAA,CAACF,OAAO;UAACS,QAAQ,EAAEA;QAAS;UAAAyB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV;AACF;AAEA,eAAelC,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}